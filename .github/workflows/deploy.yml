name: Deploy CuteBunnyWebApp

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Build the Docker image for the CuteBunnyWebApp
      - name: Build Docker Image
        run: |
          docker build \
            -t cutebunnywebapp:latest \
            -f CuteBunnyWebApp/Dockerfile \
            CuteBunnyWebApp

      # Step 3: Save the Docker image as a tar file for easy transfer
      - name: Save Docker Image as Tarball
        run: docker save cutebunnywebapp:latest -o image.tar

      # Step 4: (Optional) set permissions for the tar file
      - name: Set permissions for Tarball
        run: chmod 755 image.tar

      # Step 5: Copy the Docker image tar file to the VPS
      - name: Copy image to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: image.tar
          target: /root/

      # Step 6: SSH into the VPS and deploy the Docker image
      - name: SSH into VPS and deploy Docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # 1. Load the new image
            docker load -i /root/image.tar
            
            # 2. Stop & remove the old container if it exists
            docker stop cutebunnywebapp || true
            docker rm cutebunnywebapp || true

            # 3. Run the new container with environment variables
            docker run -d -p 7001:80 \
              --name cutebunnywebapp \
              -e APP_KEY="${{ secrets.APP_KEY }}" \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_PORT="${{ secrets.DB_PORT }}" \
              -e DB_DATABASE="${{ secrets.DB_DATABASE }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e BING_IMAGE_SEARCH_API_KEY="${{ secrets.BING_API_KEY }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              cutebunnywebapp:latest

            # 4. (Optional) Clean up the tarball
            rm -f /root/image.tar

      # Step 7: (Optional) Clean up local tarball on the GitHub runner
      - name: Clean Up Local Tarball
        run: rm -f image.tar
